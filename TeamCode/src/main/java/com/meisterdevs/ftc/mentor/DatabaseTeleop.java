package com.meisterdevs.ftc.mentor;

import android.content.Context;
import android.util.Log;

import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.Database;
import com.couchbase.lite.Document;
import com.couchbase.lite.Manager;
import com.couchbase.lite.android.AndroidContext;
import com.couchbase.lite.replicator.Replication;
import com.meisterdevs.ftc.ContextHolder;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

@TeleOp(name = "DatabaseTest", group = "Mentor")
public class DatabaseTeleop extends LinearOpMode {


    @Override
    public void runOpMode() throws InterruptedException {
        // Create a manager
        Manager manager = null;
        try {

            Context context = ContextHolder.getInstance().getContext();
            manager = new Manager(new AndroidContext(context), Manager.DEFAULT_OPTIONS);
        } catch (IOException e) {
            e.printStackTrace();
        }
        // Create or open the database named app
        Database database = null;
        try {
            database = manager.getDatabase("app");
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }
        // The properties that will be saved on the document
        Map<String, Object> properties = new HashMap<String, Object>();
        properties.put("title", "Couchbase Mobile");
        properties.put("sdk", "Android");
        // Create a new document
        Document document = database.createDocument();
// Save the document to the database
        try {
            document.putProperties(properties);
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }
// Log the document ID (generated by the database)
// and properties
        Log.d("app", String.format("Document ID :: %s", document.getId()));
        Log.d("app", String.format("Learning %s with %s", (String) document.getProperty("title"), (String) document.getProperty("sdk")));
        telemetry.addData("app", String.format("Document ID :: %s", document.getId()));
        telemetry.addData("app", String.format("Learning %s with %s", (String) document.getProperty("title"), (String) document.getProperty("sdk")));
        telemetry.update();

        // Create replicators to push & pull changes to & from Sync Gateway.
        URL url = null;
        try {
            url = new URL("http://10.0.2.2:4984/hello");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        Replication push = database.createPushReplication(url);
        Replication pull = database.createPullReplication(url);
        push.setContinuous(true);
        pull.setContinuous(true);

// Start replicators
        push.start();
        pull.start();

        waitForStart();
        while (opModeIsActive()) {
        }
    }
}
